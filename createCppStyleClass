#!/bin/bash

# 返回全大写字符串
uppercase_string() {
  local input="$1"
  if [[ "$input" == *"_"* ]]; then
    local result=""
    IFS='_' read -ra words <<<"$input"
    for word in "${words[@]}"; do
      result+=$(echo "$word" | tr '[:lower:]' '[:upper:]')
    done
    echo "$result"
  else
    echo "$input" | tr '[:lower:]' '[:upper:]'
  fi
}
# 返回首字母大写其余小写字符串
capitalize_string() {
  local input="$1"
  if [[ "$input" == *"_"* ]]; then
    local result=""
    IFS='_' read -ra words <<<"$input"
    for word in "${words[@]}"; do
      local first_char=$(echo "${word:0:1}" | tr '[:lower:]' '[:upper:]')
      local rest_chars=$(echo "${word:1}" | tr '[:upper:]' '[:lower:]')
      result+="$first_char$rest_chars"
    done
    echo "$result"
  else
    local first_char=$(echo "${input:0:1}" | tr '[:lower:]' '[:upper:]')
    local rest_chars=$(echo "${input:1}" | tr '[:upper:]' '[:lower:]')
    echo "$first_char$rest_chars"
  fi
}

generate_h() {
  local input="$1"
  local upper_input=$(uppercase_string "$input")
  local capitalized_input=$(capitalize_string "$input")

  local c_type="$2"

  if [ "$2" == "uint" ]; then
    c_type="uint32_t"
  fi

  cat <<EOF > "$input.h"
//
// Created on $(date +%Y/%m/%d).
//
// Node APIs are not fully supported. To solve the compilation error of the interface cannot be found,
// please include "napi/native_api.h".

#ifndef TARO_CAPI_HARMONY_DEMO_${upper_input}_H
#define TARO_CAPI_HARMONY_DEMO_${upper_input}_H

#include <arkui/native_type.h>
#include <arkui/native_node.h>
#include <napi/native_api.h>
#include "helper/Optional.h"

namespace TaroRuntime {
namespace TaroCSSOM {
namespace TaroStylesheet {

class ${capitalized_input}: public TaroHelper::Optional<${c_type}> {
public:
    ${capitalized_input}() = default;
    ${capitalized_input}(const napi_value&);
    void setValueFromNapi(const napi_value&);
    void setIntoNode(ArkUI_NodeHandle &node);
    static void staticSetValueToNode(const ArkUI_NodeHandle &node, const ${c_type}& value);
    static void staticResetValueToNode(const ArkUI_NodeHandle& node);
};
} // namespace TaroStylesheet
} // namespace TaroCSSOM
} // namespace TaroRuntime

#endif //TARO_CAPI_HARMONY_DEMO_${upper_input}_H
EOF
}

generate_cpp() {

  local input="$1"
  local upper_input=$(uppercase_string "$input")
  local capitalized_input=$(capitalize_string "$input")

  local c_type="$2"
  local arkui_type="f32"
  local getter_type="Double"

  if [ "$2" == "uint" ]; then
    c_type="uint32_t"
    arkui_type="u32"
    getter_type="Int32"
  fi

  cat <<EOF > "$input.cpp"
//
// Created on $(date +%Y/%m/%d).
//
// Node APIs are not fully supported. To solve the compilation error of the interface cannot be found,
// please include "napi/native_api.h".

#include "./$input.h"
#include "runtime/NapiGetter.h"
#include "runtime/NativeNodeApi.h"

namespace TaroRuntime {
namespace TaroCSSOM {
namespace TaroStylesheet {

${capitalized_input}::${capitalized_input}(const napi_value& napiValue) {
    setValueFromNapi(napiValue);
}

void ${capitalized_input}::setValueFromNapi(const napi_value& napiValue) {
    NapiGetter getter(napiValue);
    napi_valuetype type;
    getter.GetType(type);
    if (type == napi_number) {
        auto getterValue = getter.${getter_type}();
        if (getterValue.has_value()) {
            this->set(getterValue.value());
        }
    }
}

void ${capitalized_input}::setIntoNode(ArkUI_NodeHandle &node) {
    if (this->has_value()) {
        staticSetValueToNode(node, this->value());
    }
}

void ${capitalized_input}::staticSetValueToNode(const ArkUI_NodeHandle &node, const ${c_type} &value) {
    ArkUI_NumberValue arkUI_NumberValue[] = {};
    ArkUI_AttributeItem item = {arkUI_NumberValue, 1};
    arkUI_NumberValue[0].${arkui_type} = value;
    TaroRuntime::NativeNodeApi::getInstance()->setAttribute(node, NODE_${upper_input}, item);
}

void ${capitalized_input}::staticResetValueToNode(const ArkUI_NodeHandle& node) {
    TaroRuntime::NativeNodeApi::getInstance()->resetAttribute(node, NODE_${upper_input});
}
} // namespace TaroStylesheet
} // namespace TaroCSSOM
} // namespace TaroRuntime
EOF
}
type=$2 || "float"

# rm "$input.cpp" "$input.h"

generate_h $1 "$type"
generate_cpp $1 "$type"