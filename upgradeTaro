#!/bin/bash

get_package_version() {
  grep "\"$1\"" package.json | sed -E 's/.*"\^*~*([^"]+)".*/\1/'
}

set_package_version() {
  local package=$(echo "$1" | sed 's/\//\\\//g')
  local latest_version=$2

  if [[ $package ]] && [[ $latest_version ]]; then
    sed -E -i '' "s/(\"$package\": )\"[^\"]*\"/\1\"$latest_version\"/g" package.json

    echo "成功替换package.json文件中的 $package 版本号为 $latest_version"
  fi

}

update_package_version() {
  local package=$(echo "$1" | sed 's/\//\\\//g')
  local current_version=$2
  local latest_version=$3

  if [[ $current_version ]] && [[ $latest_version ]]; then

    if [ "$current_version" != "$latest_version" ]; then
      sed -E -i '' "s/(\"$package\": )\"$current_version\"/\1\"$latest_version\"/g" package.json
      echo "成功替换package.json文件中的 $package 版本号从 $current_version 改为 $latest_version"
    else
      echo "$package 已经是最新版本"
    fi
  fi
}


isWorkspace=false

if [ "$1" == "workspace" ]; then
  isWorkspace=true
fi

echo "检查最新版本..."

lasterTaroVersion=$(npm view @tarojs/cli@beta version --registry=https://registry.npmjs.org)
lasterJdTaroVersion=$(npm view @jdtaro/taro-platform-jdharmony version --registry=http://registry.m.jd.com)
lasterJdTaroCppVersion=$(npm view @jdtaro/plugin-platform-jdharmony-cpp version --registry=http://registry.m.jd.com)

output=$(ohpm info @jd-oh/taro_cpp_library --registry=http://ohpm.jd.com/repos/ohpm/)
lasterTaroCppLibraryVersion=$(echo "$output" | grep -oE '@jd-oh/taro_cpp_library-.[0-9\.]+[0-9]' | sed -E "s/[^0-9]+(.+)/\1/g")

echo "最新版本号为："
if [[ $lasterTaroVersion ]]; then
  echo "  @tarojs/*: $lasterTaroVersion"
fi

if [[ $lasterJdTaroVersion ]]; then
  echo "  @jdtaro/taro-platform-jdharmony: $lasterJdTaroVersion"
fi

if [[ $lasterJdTaroCppVersion ]]; then
  echo "  @jdtaro/taro-platform-jdharmony-cpp: $lasterJdTaroCppVersion"
fi

if [[ $lasterTaroCppLibraryVersion ]]; then
  echo "  @jd-oh/taro_cpp_library: $lasterTaroCppLibraryVersion"
fi

echo "
"

if [ -f "package.json" ]; then
  currentTaroVersion=$(get_package_version "@tarojs/cli")

  update_package_version @tarojs/.+ $currentTaroVersion $lasterTaroVersion

  if [[ $isWorkspace == true ]]; then
    set_package_version @jdtaro/taro-platform-jdharmony "workspace:*"

    set_package_version @jdtaro/plugin-platform-jdharmony-cpp "workspace:*"

  else
    set_package_version @jdtaro/taro-platform-jdharmony $lasterJdTaroVersion

    set_package_version @jdtaro/plugin-platform-jdharmony-cpp $lasterJdTaroCppVersion

  fi
else
  echo "当前目录下没有package.json文件"
fi
